package jdivers.items;

import java.util.Random;

public class RandomGenerator
{
	/**
	 * The bound to the numbers generated by the random number generator.
	 */
	private static final int MAX_RANDOM_BOUND = 100;
	@SuppressWarnings("unused")
	private static final double DEFAULT_CHANCE_SAPPHIRE = 0.50d;
	@SuppressWarnings("unused")
	private static final double DEFAULT_CHANCE_RUBY = 0.20d;
	@SuppressWarnings("unused")
	private static final double DEFAULT_CHANCE_GOLD = 0.04d;
	@SuppressWarnings("unused")
	private static final double DEFAULT_CHANCE_DIAMOND = 0.01d;
	@SuppressWarnings("unused")
	private static final double DEFAULT_CHANCE_BATTERY_DRAIN = 0.1d;

	private static final Random r = new Random();

	/**
	 * Generates a random gem value based on predefined chances.<br>
	 * <b>-1:</b> Generator messed up, tell the author to fix this.<br>
	 * <b>0:</b> Generate nothing.<br>
	 * <b>1:</b> Generate a sapphire.<br>
	 * <b>2:</b> Generate a ruby.<br>
	 * <b>3:</b> Generate gold.<br>
	 * <b>4:</b> Generate a diamond.
	 * 
	 * @return
	 */
	public static int generateGem()
	{
		int gemValue = -1;

		int randomNum = r.nextInt(MAX_RANDOM_BOUND);

		if (randomNum < 75)
		{
			if (randomNum < 25)
			{
				gemValue = 0;
			}
			else
			{
				gemValue = 1;
			}
		}
		else
		{
			switch (randomNum)
			{
				default:
					gemValue = 2;
					break;

				case 95:
				case 96:
				case 97:
				case 98:
					gemValue = 3;
					break;

				case 99:
					gemValue = 4;
					break;
			}
		}

		return gemValue;
	}

	public static boolean generateBatteryDrain()
	{
		int randomNum = r.nextInt(MAX_RANDOM_BOUND);

		return (randomNum < 10);
	}
};
